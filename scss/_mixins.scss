@mixin borderanimate {
  position: relative;
  overflow: hidden;

   &:before {
     content: "";
     position: absolute;
     top: -2px;
     left: -2px;
     width: calc(100% + 4px);
     height: calc(100% + 4px);
     z-index: 0;
     animation: borders 0.75s linear infinite;
     background: radial-gradient($blue 33%, transparent, transparent);

     @keyframes borders {
       0% {
         transform: translate3d(-50%,-50%,0);
       }
       25% {
         transform: translate3d(50%, -50%,0);
       }
       50% {
         transform: translate3d(50%, 50%,0);
       }
       75% {
         transform: translate3d(-50%, 50%,0);
       }
       100% {
         transform: translate3d(-50%, -50%,0);
       }
     }
    }

   &:after {
     content: "Preparing your quote...";
     position: absolute;
     top: 2px;
     left: 2px;
     z-index: 0;
     width: calc(100% - 4px);
     height: calc(100% - 4px);
     color: $blue;
     line-height: 100px;
     text-align: center;
     background-color: white;
   }
}

@mixin loadingBorder {

  &:before {
    position: absolute;
    top: 0;
    content: "";
    width: 200%;
    height: 4px;
    background-image: linear-gradient(to right, transparent, transparent, #4579FF, #50E3C2, #4579FF, transparent, transparent);
    background-size: 200%;
    animation: borders 0.5s linear infinite;

    @keyframes borders {
      0% {
        background-position: -100% 50%;
      }
      100% {
        background-position: 100% 50%;
      }
    }
  }
}

@mixin flex-row {
  display: flex;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
